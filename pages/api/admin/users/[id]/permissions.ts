import { NextApiRequest, NextApiResponse } from "next";
import { getServerSession } from "next-auth";
import { authOptions } from "../../../auth/[...nextauth]";
import { prisma } from "../../../../../lib/prisma";

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const session = await getServerSession(req, res, authOptions);

  if (!session) {
    return res.status(401).json({ message: "N√£o autenticado" });
  }

  const userSession = session.user as any;
  const { id } = req.query;

  if (userSession.role !== "admin") {
    return res.status(401).json({ message: "Acesso negado" });
  }

  if (req.method === "GET") {
    try {
      const targetUser = await prisma.user.findUnique({
        where: { id: id as string },
        select: {
          id: true,
          clientId: true,
          name: true,
          email: true,
          permissoes: true,
        },
      });

      if (!targetUser) {
        return res.status(404).json({ message: "Usu√°rio n√£o encontrado" });
      }

      const clientId = userSession.clientId;
      const isSuperAdmin =
        clientId === null || clientId === undefined || clientId === "undefined";

      if (!isSuperAdmin && targetUser.clientId !== userSession.clientId) {
        return res
          .status(403)
          .json({ message: "Sem permiss√£o para acessar este usu√°rio" });
      }

      res.status(200).json(targetUser);
    } catch (error) {
      console.error("Erro ao buscar usu√°rio:", error);
      res.status(500).json({ message: "Erro interno do servidor" });
    }
  } else if (req.method === "PUT") {
    try {
      const { permissoes } = req.body;

      const targetUser = await prisma.user.findUnique({
        where: { id: id as string },
        select: { id: true, clientId: true, email: true, name: true },
      });

      if (!targetUser) {
        return res.status(404).json({ message: "Usu√°rio n√£o encontrado" });
      }

      const clientId = userSession.clientId;
      const isSuperAdmin =
        clientId === null || clientId === undefined || clientId === "undefined";

      if (!isSuperAdmin && targetUser.clientId !== userSession.clientId) {
        return res
          .status(403)
          .json({ message: "Sem permiss√£o para editar este usu√°rio" });
      }

      // ‚úÖ NOVO: Atualizar permiss√µes e timestamp para invalidar sess√µes
      const updatedUser = await prisma.user.update({
        where: { id: id as string },
        data: {
          permissoes: permissoes,
          updatedAt: new Date(), // ‚Üê For√ßa novo timestamp
        },
        select: {
          id: true,
          name: true,
          email: true,
          permissoes: true,
        },
      });

      // ‚úÖ NOVO: Invalidar sess√µes existentes do usu√°rio (se tabela existir)
      try {
        await prisma.session.deleteMany({
          where: {
            userId: id as string,
          },
        });
        console.log(`üîÑ Sess√µes invalidadas para usu√°rio: ${targetUser.email}`);
      } catch (sessionError) {
        console.log(
          "‚ö†Ô∏è Aviso: Tabela Session n√£o encontrada (NextAuth em JWT mode)"
        );
      }

      console.log(`‚úÖ Permiss√µes atualizadas para: ${targetUser.email}`);

      res.status(200).json({
        ...updatedUser,
        message:
          "Permiss√µes atualizadas com sucesso. Usu√°rio ser√° desconectado automaticamente.",
      });
    } catch (error) {
      console.error("Erro ao salvar permiss√µes:", error);
      res.status(500).json({ message: "Erro interno do servidor" });
    }
  } else {
    res.status(405).json({ message: "M√©todo n√£o permitido" });
  }
}
